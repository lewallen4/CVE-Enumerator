import requests
import json
from datetime import datetime, timedelta
import subprocess
import os

def delete_output_files(directory):
    for filename in os.listdir(directory):
        if filename.startswith("output_"):
            os.remove(os.path.join(directory, filename))

def generate_iso8601_format():
    # Get current date and time
    current_datetime = datetime.utcnow()

    # Subtract 1 hour
    one_day_ago = current_datetime - timedelta(days=1)

    # Subtract 1 week
    one_week_ago = current_datetime - timedelta(days=8)

    # Format dates in ISO-8601 format
    iso8601_current = current_datetime.strftime('%Y-%m-%dT%H:%M:%S')
    iso8601_one_day_ago = one_day_ago.strftime('%Y-%m-%dT%H:%M:%S')
    iso8601_one_week_ago = one_week_ago.strftime('%Y-%m-%dT%H:%M:%S')
    pulledURL = "https://services.nvd.nist.gov/rest/json/cves/2.0/?pubStartDate=" + iso8601_one_week_ago + ".000&pubEndDate=" + iso8601_one_day_ago + ".000"

    # Print formatted dates
    print(" Extracting CVEs from")
    print(" ")
    print(pulledURL)
    print(" ")
    print(" Current UTC Time:", iso8601_current)
    print(" One Week Ago UTC Time:", iso8601_one_week_ago)
    
    return pulledURL

    
    

def pull_cve_list():
    try:
        response = requests.get(pulledURL, headers={"User-Agent": "Mozilla/5.0"})
        print("pulling")
        if response.status_code == 200:
            with open("CVElist.json", "w", encoding="utf-8") as file:
                file.write(response.text)
            print("CVE list successfully pulled and saved to CVElist.json.")
        else:
            print("Failed to fetch CVE list. Status code:", response.status_code)
    except Exception as e:
        print("An error occurred:", e)


def sort_and_split_json():
    # Read JSON file
    with open("CVElist.json", 'r', encoding="utf-8") as f:
        data = json.load(f)
    
    # Check if data is a dictionary
    if not isinstance(data, dict):
        print("Error: Invalid JSON format. Expected a dictionary.")
        return
    
    # Accessing the vulnerabilities list
    vulnerabilities = data.get('vulnerabilities', [])
    
    # Sort entries by CVE ID
    sorted_data = sorted(vulnerabilities, key=lambda x: x['cve']['id'])
    
    # Split sorted entries into separate files
    for entry in sorted_data:
        cve_id = entry['cve']['id']
        filename = f"output_{cve_id}.json"
        with open(filename, 'w') as f:
            json.dump(entry, f, indent=4)  # Write entry to file

    print("Files created successfully.")

if __name__ == "__main__":
    current_directory = os.getcwd()
    delete_output_files(current_directory)
    pulledURL = generate_iso8601_format()
    pull_cve_list()
    sort_and_split_json()
    
    # Your existing script code here

# Get the directory of the current script
current_directory = os.path.dirname(os.path.realpath(__file__))

# Define the path to the Python file you want to launch
python_file_path = os.path.join(current_directory, "GUIv4.py")

# Launch the Python file using subprocess
subprocess.Popen(["python", python_file_path])