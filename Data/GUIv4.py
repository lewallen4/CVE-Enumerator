import os
import json
import tkinter as tk
from tkinter import ttk

class CVEViewer:
    def __init__(self, root):
        self.root = root
        self.root.title("CVE Enumerator")
        self.root.geometry("800x600")

        self.data_files = [filename for filename in os.listdir() if filename.startswith("output_")]
        self.current_index = 0

        self.load_data()

        self.title_font = ("Franklin Gothic Medium", 16, "bold")
        self.button_font = ("Franklin Gothic Medium", 12)
        self.logo_font = ("Consolas", 5, "bold")
        
        # ASCII Art Logo
        self.ascii_logo = """
          _____________   _______________                              
          \_   ___ \   \ /   /\_   _____/                              
          /    \  \/\   Y   /  |    __)_                               
          \     \____\     /   |        \                              
           \______  / \___/   /_______  /                              
                  \/                  \/                               
 ___________                                         __                 
 \_   _____/ ____  __ __  _____   ________________ _/  |_  ___________  
  |    __)_ /    \|  |  \/     \_/ __ \_  __ \__  \\   __\/  _ \_  __ \ 
  |        \   |  \  |  /  Y Y  \  ___/|  | \// __ \|  | (  <_> )  | \/ 
 /_______  /___|  /____/|__|_|  /\___  >__|  (____  /__|  \____/|__|    
         \/     \/            \/     \/           \/                     
        """
        
        self.logo_label = tk.Label(self.root, text=self.ascii_logo, font=self.logo_font)
        self.logo_label.pack(pady=2)

        self.title_label = tk.Label(self.root, text="", font=self.title_font)
        self.title_label.pack(pady=2)

        self.description_text = tk.Text(self.root, wrap="word", height=20)
        self.description_text.pack(pady=5, padx=10, fill="both", expand=True)
        
        self.scrollbar = tk.Scrollbar(self.root, command=self.description_text.yview)
        self.scrollbar.pack(side="right", fill="y")

        self.description_text.config(yscrollcommand=self.scrollbar.set)

        self.navigation_frame = tk.Frame(self.root)
        self.navigation_frame.pack(pady=10)

        self.first_button = tk.Button(self.navigation_frame, text="Eldest", font=self.button_font, command=self.show_first)
        self.first_button.grid(row=0, column=0, padx=(10, 5))

        self.prev_button = tk.Button(self.navigation_frame, text="Previous", font=self.button_font, command=self.show_previous)
        self.prev_button.grid(row=0, column=1, padx=5)

        self.next_button = tk.Button(self.navigation_frame, text="Next", font=self.button_font, command=self.show_next)
        self.next_button.grid(row=0, column=2, padx=5)

        self.last_button = tk.Button(self.navigation_frame, text="Current", font=self.button_font, command=self.show_last)
        self.last_button.grid(row=0, column=3, padx=(5, 10))

        self.show_current_entry()

    def load_data(self):
        if self.data_files:
            with open(self.data_files[self.current_index]) as f:
                self.data = json.load(f)

    def show_current_entry(self):
        entry = self.data['cve']
        self.title_label.config(text=f"ID: {entry['id']}", font=self.title_font)
        
        self.description_text.delete("1.0", tk.END)
        self.description_text.insert(tk.END, f"ID: {entry['id']}\n\n")
        self.description_text.insert(tk.END, f"Published: {entry['published']}\n")
        self.description_text.insert(tk.END, f"Source Identifier: {entry['sourceIdentifier']}\n")
        self.description_text.insert(tk.END, f"Last Modified: {entry['lastModified']}\n")
        self.description_text.insert(tk.END, f"Vulnerability Status: {entry['vulnStatus']}\n\n")

        for description in entry['descriptions']:
            if description['lang'] == 'en':
                self.description_text.insert(tk.END, f"{description['value']}\n\n")

        self.description_text.tag_config("link", foreground="blue", underline=True)
        self.description_text.tag_bind("link", "<Button-1>", self.open_reference)
        self.description_text.tag_bind("link", "<Enter>", self.change_cursor)
        self.description_text.tag_bind("link", "<Leave>", self.restore_cursor)
        
        self.description_text.insert(tk.END, "References:\n")
        for reference in entry['references']:
            self.description_text.insert(tk.END, reference['url'] + '\n', "link")
        self.description_text.insert(tk.END, "\n")

    def show_previous(self):
        if self.current_index > 0:
            self.current_index -= 1
            self.load_data()
            self.show_current_entry()

    def show_next(self):
        if self.current_index < len(self.data_files) - 1:
            self.current_index += 1
            self.load_data()
            self.show_current_entry()

    def show_first(self):
        self.current_index = 0
        self.load_data()
        self.show_current_entry()

    def show_last(self):
        self.current_index = len(self.data_files) - 1
        self.load_data()
        self.show_current_entry()

    def open_reference(self, event):
        import webbrowser
        index = self.description_text.index(tk.CURRENT)
        line, col = index.split('.')
        line = int(line)
        # Iterate through references and check if cursor position falls within a link's range
        for reference in self.data['cve']['references']:
            link_start_index = self.description_text.search(reference['url'], f"{line}.0", tk.END)
            if link_start_index:  # If a link is found
                link_end_index = self.description_text.index(f"{link_start_index}+{len(reference['url'])}c")
                if self.description_text.compare(index, ">=", link_start_index) and self.description_text.compare(index, "<", link_end_index):
                    webbrowser.open_new(reference['url'])
                    break

    def change_cursor(self, event):
        self.description_text.config(cursor="hand2")

    def restore_cursor(self, event):
        self.description_text.config(cursor="")

if __name__ == "__main__":
    root = tk.Tk()
    app = CVEViewer(root)
    root.mainloop()
